x <- c(3,3,2,2,5,5,8,8,9)
x[3]
x[5]
x[8]
x[1]
demo_table <- read.csv(file=demo.csv, check.names = F, stringsAsFactors = F)
demo_table <- file="demo.csv", check.names = F, stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names = F, stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names = F, stringsAsFactors = F)
cd 01_Demo
demo_table <- read.csv(file='demo.csv', check.names = F, stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='01_Demo/demo.csv',check.names=F,stringsAsFactors = F)
demo_table2 <- fromJSON(txt='01_Demo/demo.json')
library(jsonlite)
demo_table2 <- fromJSON(txt='01_demo/demo.json')
View(demo_table)
demo_table[3, "Year"]
demo_table[3,3]
demo_table$"Year"[3]
demo_table$"Vehicle_Class"[2]
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
?subset()
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(filter_table2)
?sample()
num_rows <- 1:nrow(demo_table)
sample_rows3 <- sample(num_rows, 3)
demo_table[sample_rows,]
demo_table[sample_rows,]
demo_table[sample_rows3,]
demo_table[sample(1:nrow(demo_table),3),]
demo_table[sample(1:nrow(demo_table),3),]
demo_table[sample(1:nrow(demo_table),3),]
save.image("C:/Users/seana/Desktop/Analyst Class Work/R_Analysis/module_lessons.RData")
library(tidyverse)
?mutate()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year), IsActive=TRUE) #add columns to original data frame
View(demo_table)
View(demo_table2)
View(demo_table2)
View(demo_table)
save.image("C:/Users/seana/Desktop/Analyst Class Work/R_Analysis/module_lessons_new.RData")
?gather()
?gather
library(tidyverse)
?gather()
library(readr)
demo2 <- read_csv("02_Demo/demo2.csv")
View(demo2)
demo_table3 <- read.csv('demo2.csv', check.names = F,stringsAsFactors = F)
ls
cd 02_Demo
demo_table3 <- read_csv("demo2.csv", check.names=F, stringsAsFactors=F)
demo_table3 <- read.csv('demo2.csv', check.names = F, stringsAsFactors = F)
cd 01_Demo
demo_table3 <- read.csv('demo2.csv', check.names = F, stringsAsFactors = F)
demo_table3 <- read.csv('01_Demo/demo2.csv', check.names = F, stringsAsFactors = F)
View(demo_table3)
vehicle_table <- read.csv('01_Demo/Vehicle_Data.xlsx', check.names = F, stringsAsFactors = F)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price::popularity)
long_table <- gather(demo_table3, key="Metric", value="Score", buying_price:popularity)
View(long_table)
?spread
wide_table <- long_table %>% spread(key="Metric", value = "Score")
all.equal(demo_table3, wide_table)
table <- demo_table3[,order(colnames(wide_table))]
all.equal(demo_table3, wide_table)
View(table)
View(wide_table)
View(table)
all.equal(demo_table3, table)
?ggplot
head(mpg)
plt <- ggplot(mpg, aes(x=class)) #import dataset into ggplot2
plot + geom_bar() # plot a bar plot
plt + geom_bar() #plot a bar plot
?geom_bar
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups='keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt <- geom_col() #plot a bar plot
View(plt)
View(mpg_summary)
View(plt)
plt
view(plt)
View(plt)
plt+geom_bar()
plt + geom_bar()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() _ xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plots with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_smmary <- subset(mpg, manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups='keep') #create summary table
plot <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
View(plot)
View(plt)
View(mpg_summary)
View(mpg_smmary)
View(mpg_smmary)
View(mpg_smmary)
ls()
rm[8]
rm("8")
rm("mpg_smmary")
ls()
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
View(mpg_summary)
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(16:30)) # add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
plt <- ggplot(aes(size=City Fuel-Efficiency (MPG)))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive", size="City Fuel-Efficiency (MPG)")
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive", size=City Fuel-Efficiency (MPG))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)") + geom_point(colour="Vehicle Class",shape="Type of Drive", size="City Fuel-Efficiency (MPG)"))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)") + geom_point(colour="Vehicle Class",shape="Type of Drive", size="City Fuel-Efficiency (MPG)")
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive", size="City Fuel-Efficiency (MPG)")
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)") + geom_point(aes(colour="Vehicle Class",shape="Type of Drive", size="City Fuel-Efficiency (MPG)"))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)") + geom_point(aes(colour="Vehicle Class", size="City Fuel-Efficiency (MPG)"))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
plt + geom_point(aes(size="City Fuel-Efficiency (MPG)"))
plt <- ggplot(mpg, aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() # add boxplot
plt <- ggplot(mpg, aes(x=manufacturer, y=hwy)) # import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) # add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill = white, colour = blues9)
plt + geom_boxplot(fill = "white", colour = "blue")
View(demo_table3)
View(mpg_summary)
View(mpg_summary)
View(plot)
View(plt)
plt + geom+boxplot(fill = "white", colour = "drv")
plt + geom_boxplot(fill="white", colour="drv")
plt + geom_boxplot(fill="white", colour="blue")
plt + geom_boxplot(aes(colour="drv"))
plt + geom_boxplot(aes(color="cyl"))
plt + geom_boxplot(aes(color="manufacturer"))
plt + geom_boxplot(fill="white", colour="blue")
plt + geom_boxplot(fill="white", colour="blue", outlier.shape = 1)
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
View(mpg_summary)
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
no
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
m
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
#no
sto
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)")
plt + geom_tile() + theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
?facet_wrap()
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
setwd("C:/Users/seana/Desktop/github/MechaCar_Statistical_Analysis")
#Import the dplyr library
library(dplyr)
library(tidyverse)
#Import and read the MechaCar_mpg.csv file as a dataframe
mecha_df <- read.csv('Resources/MechaCar_mpg.csv', check.names = F,
stringsAsFactors = F)
#Perform linear regression using the lm() function. In the lm() function,
#pass in all six variables (i.e., columns), and add the dataframe you created
#in Step 4 as the data parameter.
linear_mecha <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle +
ground_clearance + AWD, data= mecha_df)
linear_mecha
#Using the summary() function, determine the p-value and the
# r-squared value for the linear regression model.
summary(linear_mecha)
# checking linear regressions of variables that only impact mpg
mpg_mecha <- lm(mpg ~ vehicle_length + ground_clearance, data=mecha_df)
summary(mpg_mecha)
#linear regression line of mpg vs vehicle length
#1 create linear model
length_model <- lm(mpg ~ vehicle_length, data=mecha_df)
yvals <- length_model$coefficients['mpg'] + length_model$coefficients['(intercept']
plt <- ggplot(mecha_df, aes(x=mpg, y=vehicle_length))
plt + geom_point() + geom_line(aes(y=yvals),color='red')
#linear regression line of mpg vs ground clearance
clearance_model <- lm(mpg ~ ground_clearance, data=mecha_df)
yvals2 <- clearance_model$coefficients['mpg'] + clearance_model$coefficients['(intercept']
plt <- ggplot(mecha_df, aes(x=mpg, y=ground_clearance))
plt + geom_point() + geom_line(aes(y=yvals2),color='red')
#Import the dplyr library
library(dplyr)
library(tidyverse)
#Import and read the MechaCar_mpg.csv file as a dataframe
mecha_df <- read.csv('Resources/Suspension_Coil.csv', check.names = F,
stringsAsFactors = F)
#Import and read the MechaCar_mpg.csv file as a dataframe
suspension_df <- read.csv('Resources/Suspension_Coil.csv', check.names = F,
stringsAsFactors = F)
View(suspension_df)
mecha_df <- read.csv('Resources/MechaCar_mpg.csv', check.names = F,
stringsAsFactors = F)
View(mecha_df)
# import and read Suspension_Coil.csv file as a table
suspension_df <- read.csv('Resources/Suspension_Coil.csv', check.names = F,
stringsAsFactors = F)
suspension_summary <- summarize(suspension_df)
suspension_summary
View(suspension_df)
View(suspension_summary)
suspension_summary <- summarry(suspension_df)
View(suspension_df)
View(suspension_df)
?summarize()
total_summary <- summary(suspension_df)
total_summary
total_summary["Mean"]
total_summary[["Mean"]]
total_summary(PSI["Mean"])
total_summary <- summary(suspension_df[c('PSI')])
total_summary <- summary(suspension_df
total_summary
total_summary <- summary(suspension_df[c('PSI')])
total_summary
total_summary["Mean"]
total_summary <- summarize(suspension_df[c('PSI')])
total_summary
total_summary["Mean"]
total_summary
View(total_summary)
View(total_summary)
total_summary <- summarize(suspension_df, mean[PSI])
total_summary <- summarize(suspension_df, mean(PSI))
total_summary
psi_mean <- summarize(suspension_df, mean(PSI))
psi_mean
psi_median <- summarize(suspension_df, median(PSI))
psi_median
psi_variance <- summarize(suspension_df, vars(PSI))
psi_variance
psi_sd <- summarize(suspension_df, sd(PSI))
psi_sd
psi_variance <- summarize(suspension_df, var(PSI))
psi_variance
# combined all info into table
total_summary <- psi_mean + psi_median + psi_sd + psi_variance
total_summary
# combined all info into table
total_summary <- c("psi_mean", "psi_median", "psi_sd", "psi_variance")
total_summary
# combined all info into table
total_summary <- dataframe(c("psi_mean", "psi_median", "psi_sd", "psi_variance"))
total_summary
total_summary <- summarize(suspension_df, mean=mean(PSI) %>% median=median(PSI) %>%
total_summary <- suspension_df %>% summarize(Mean=mean(PSI),
Median=median(PSI),
SD=sd(PSI),
Variance=var(PSI))
total_summary
View(total_summary)
# create a data frame using groupby and summarize functions to group each
# manufacturing lot by mean, median, variance, and standard deviation for
# suspension coil's PSI column
lot_summary <- suspension_df %>% summarize(Mean=mean(PSI),
Median=median(PSI),
SD=sd(PSI),
Variance=var(PSI),
group_by(Manufacturing_Lot))
# create a data frame using groupby and summarize functions to group each
# manufacturing lot by mean, median, variance, and standard deviation for
# suspension coil's PSI column
lot_summary <- suspension_df %>% summarize(Mean=mean(PSI),
Median=median(PSI),
SD=sd(PSI),
Variance=var(PSI),
.groups = (Manufacturing_Lot))
# create a data frame using groupby and summarize functions to group each
# manufacturing lot by mean, median, variance, and standard deviation for
# suspension coil's PSI column
lot_summary <- suspension_df %>% group_by(Manufacturing_lot) %>% summarize(Mean=mean(PSI),
Median=median(PSI),
SD=sd(PSI),
Variance=var(PSI))
# Create a data frame using the summarize function to get the mean, median,
# standard deviation and variance for PSI
total_summary <- suspension_df %>% summarize(Mean=mean(PSI),
Median=median(PSI),
SD=sd(PSI),
Variance=var(PSI),
.groups='drop')
total_summary
# Create a data frame using the summarize function to get the mean, median,
# standard deviation and variance for PSI
total_summary <- suspension_df %>% summarize(Mean=mean(PSI),
Median=median(PSI),
SD=sd(PSI),
Variance=var(PSI))
total_summary
# create a data frame using groupby and summarize functions to group each
# manufacturing lot by mean, median, variance, and standard deviation for
# suspension coil's PSI column
lot_summary <- suspension_df %>% group_by(Manufacturing_lot) %>% summarize(Mean=mean(PSI),
Median=median(PSI),
SD=sd(PSI),
Variance=var(PSI),
.groups='drop')
# create a data frame using groupby and summarize functions to group each
# manufacturing lot by mean, median, variance, and standard deviation for
# suspension coil's PSI column
lot_summary <- suspension_df %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),
Median=median(PSI),
SD=sd(PSI),
Variance=var(PSI),
.groups='drop')
lot_summary
# create a data frame using group_by and summarize functions to group each
# manufacturing lot by mean, median, variance, and standard deviation for
# suspension coil's PSI column
lot_summary <- suspension_df %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI),
.groups='drop')
lot_summary
# Create a data frame using the summarize function to get the mean, median,
# standard deviation and variance for PSI
total_summary <- suspension_df %>% summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI))
total_summary
# use t.test function to determine if the PSI across all manufacturing lots is
# statistically different from the population mean 1,500 points per square inch
t.test(suspension_df$PSI, mu=1500)
lot_1 <- subset(suspension_df, Manufacturing_Lot="Lot1")
lot_1
lot_1 <- subset(suspension_df, Manufacturing_Lot=="Lot1")
lot_1
#lot 2
lot_2 <- subset(suspension_df, Manufacturing_Lot=="Lot2")
lot_2
#lot 3
lot_3 <- subset(suspension_df, Manufacturing_Lot=="Lot3")
lot_3
# check the t.test of each lot
t.test(lot1$PSI, mu=1500)
# check the t.test of each lot
t.test(lot_1$PSI, mu=1500)
t.test(lot_2$PSI, mu=1500)
t.test(lot_3$PSI, mu=1500)
#Import the dplyr library
library(dplyr)
library(tidyverse)
#Import and read the MechaCar_mpg.csv file as a dataframe
mecha_df <- read.csv('Resources/MechaCar_mpg.csv', check.names = F,
stringsAsFactors = F)
#Perform linear regression using the lm() function. In the lm() function,
#pass in all six variables (i.e., columns), and add the dataframe you created
#in Step 4 as the data parameter.
linear_mecha <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle +
ground_clearance + AWD, data= mecha_df)
linear_mecha
#Using the summary() function, determine the p-value and the
# r-squared value for the linear regression model.
summary(linear_mecha)
# checking linear regressions of variables that only impact mpg
mpg_mecha <- lm(mpg ~ vehicle_length + ground_clearance, data=mecha_df)
summary(mpg_mecha)
#linear regression line of mpg vs vehicle length
#1 create linear model
length_model <- lm(mpg ~ vehicle_length, data=mecha_df)
yvals <- length_model$coefficients['mpg'] + length_model$coefficients['(intercept']
plt <- ggplot(mecha_df, aes(x=mpg, y=vehicle_length))
plt + geom_point() + geom_line(aes(y=yvals),color='red')
#linear regression line of mpg vs ground clearance
clearance_model <- lm(mpg ~ ground_clearance, data=mecha_df)
yvals2 <- clearance_model$coefficients['mpg'] + clearance_model$coefficients['(intercept']
plt <- ggplot(mecha_df, aes(x=mpg, y=ground_clearance))
plt + geom_point() + geom_line(aes(y=yvals2),color='red')
# import and read Suspension_Coil.csv file as a table
suspension_df <- read.csv('Resources/Suspension_Coil.csv', check.names = F,
stringsAsFactors = F)
# Create a data frame using the summarize function to get the mean, median,
# standard deviation and variance for PSI
total_summary <- suspension_df %>% summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI))
total_summary
# create a data frame using group_by and summarize functions to group each
# manufacturing lot by mean, median, variance, and standard deviation for
# suspension coil's PSI column
lot_summary <- suspension_df %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),
Median=median(PSI),
Variance=var(PSI),
SD=sd(PSI),
.groups='drop')
lot_summary
# use t.test function to determine if the PSI across all manufacturing lots is
# statistically different from the population mean 1,500 points per square inch
t.test(suspension_df$PSI, mu=1500)
# write 3 more scripts using t.test and its subset() argument to determine if
# the PSI for each manufacturer lot is statistically different from the population
# mean of 1,500 points per square inch
#lot 1
lot_1 <- subset(suspension_df, Manufacturing_Lot=="Lot1")
lot_1
#lot 2
lot_2 <- subset(suspension_df, Manufacturing_Lot=="Lot2")
lot_2
#lot 3
lot_3 <- subset(suspension_df, Manufacturing_Lot=="Lot3")
lot_3
# check the t.test of each lot
t.test(lot_1$PSI, mu=1500)
t.test(lot_2$PSI, mu=1500)
t.test(lot_3$PSI, mu=1500)
linear_mecha
total_summary
View(total_summary)
View(lot_summary)
# use t.test function to determine if the PSI across all manufacturing lots is
# statistically different from the population mean 1,500 points per square inch
t.test(suspension_df$PSI, mu=1500)
lot_1
# check the t.test of each lot
t.test(lot_1$PSI, mu=1500)
t.test(lot_2$PSI, mu=1500)
t.test(lot_3$PSI, mu=1500)
